module operaciones_aritmeticas (
    input clk,                    // Reloj
    input reset,                  // Reset
    input [7:0] M,                // Selector de operación
    input [31:0] A,               // Operando A
    input [31:0] B,               // Operando B
    output reg [31:0] resultado,  // Resultado de la operación
    output reg [7:0] leds         // LEDs para indicar valores
);

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            resultado <= 32'b0;
            leds <= 8'b0; // Apagar LEDs en reset
        end else begin
            case (M)
                8'd0: resultado <= A + B;
                8'd1: resultado <= A - B;
                8'd2: resultado <= B - A;
                8'd3: resultado <= A & B;
                8'd4: resultado <= A | B;
                8'd5: resultado <= A ^ B;
                8'd6: resultado <= ~A;
                8'd7: resultado <= ~B;
                8'd8: resultado <= A * B;
                8'd9: resultado <= (B != 0) ? (A / B) : 32'b0; // Evitar división por cero
                8'd10: resultado <= A << 1;
                8'd14: resultado <= fibonacci(A);
                8'd15: resultado <= factorial(A);
                8'd16: resultado <= potencia(A, B);
                8'd17: resultado <= (B != 0) ? (A % B) : 32'b0;
                8'd18: resultado <= raiz(A);
                default: resultado <= 32'b0;
            endcase
            leds <= resultado[7:0]; // Mostrar el resultado en los LEDs (solo 8 bits menos significativos)
        end
    end

    // Función de Fibonacci
    function [31:0] fibonacci;
        input [31:0] n;
        integer i;
        reg [31:0] a, b, temp;
        begin
            a = 0;
            b = 1;
            for (i = 2; i <= n; i = i + 1) begin
                temp = a + b;
                a = b;
                b = temp;
            end
            fibonacci = (n == 0) ? 0 : b;
        end
    endfunction

    // Función de Factorial
    function [31:0] factorial;
        input [31:0] n;
        integer i;
        reg [31:0] result;
        begin
            result = 1;
            for (i = 2; i <= n; i = i + 1) begin
                result = result * i;
            end
            factorial = (n == 0) ? 1 : result;
        end
    endfunction

    // Función de Potencia
    function [31:0] potencia;
        input [31:0] base, exponente;
        integer i;
        reg [31:0] result;
        begin
            result = 1;
            for (i = 0; i < exponente; i = i + 1) begin
                result = result * base;
            end
            potencia = result;
        end
    endfunction

    // Función de Raíz Cuadrada (aproximación simple)
    function [31:0] raiz;
        input [31:0] n;
        integer i;
        begin
            raiz = 0;
            for (i = 0; i * i <= n; i = i + 1) begin
                raiz = i;
            end
        end
    endfunction

endmodule
