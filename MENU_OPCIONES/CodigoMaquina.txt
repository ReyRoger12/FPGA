 ini:
		lw x4, 96(x0)    # Cargar A 
        lw x5, 92(x0)    # Cargar B 
        lw x6, 88(x0)    # Cargar M 

        beq x6, x0, suma 
        
		addi x7, x0, 1        # asignar un valor a x7
        beq x6, x7, restaAB   # salto a Resta si M es igual a x7
         
		addi x7, x0, 2		 # asignar un valor a x7
        beq x6, x7, restaBA  # salto a restaA-B si M es igual a x7
        
		addi x7, x0, 3
        beq x6, x7, andAB
        
		addi x7, x0, 4
        beq x6, x7, orAB
        
		addi x7, x0, 5
        beq x6, x7, xorAB
        
		addi x7, x0, 6
        beq x6, x7, notA
        
		addi x7, x0, 7
        beq x6, x7, notB
        
		addi x7, x0, 8
        beq x6, x7, multiplicacion
        
		addi x7, x0, 9
        beq x6, x7, division
        
		addi x7, x0, 10
        beq x6, x7, despIzq


		addi x7, x0, 11
        beq x6, x7, incremento


		addi x7, x0, 12
        beq x6, x7, decremento
        

		addi x7, x0, 13
        beq x6, x7, despDer


		addi x7, x0, 14
        beq x6, x7, fibonacci
        
		addi x7, x0, 15
        beq x6, x7, factorial
        jal x0, ini 

suma:
        add x3, x4, x5      
        sw x3, 100(x0)
        jal x0, ini 

restaAB:
        sub x3, x4, x5      
        sw x3, 100(x0)         
        jal x0, ini 

restaBA:
        sub x3, x5, x4      
        sw x3, 100(x0)         
        jal x0, ini 

andAB:
        and x3, x4, x5      
        sw x3, 100(x0)         
        jal x0, ini 

orAB:
        or x3, x4, x5      
        sw x3, 100(x0)         
        jal x0, ini 

xorAB:
        or x3, x4, x5      
        and x8, x4, x5   
        sub x3, x3, x8    
        sw x3, 100(x0)         
        jal x0, ini 

notA:
        sub x5, x0, x4   # Calcular -A  
        addi x5, x5, -1  # NOT A = -A - 1  
        andi x3, x5, 0xF # Mantener solo los 4 bits menos significativos (0xF)  
        sw x3, 100(x0)   # Almacenar resultado en 100(x0)  
		jal x0, ini 

notB:
        sub x6, x0, x5   # Calcular -B  
        addi x6, x6, -1  # NOT B = -B - 1  
        andi x3, x6, 0xF # Mantener solo los 4 bits menos significativos (0xF)  
        sw x3, 100(x0)   # Almacenar resultado en 100(x0)  
		jal x0, ini

multiplicacion:
        addi x3, x0, 0    
        addi x8, x5, 0    

mul_loop:
        beq x8, x0, finMul  
        add x3, x3, x4    
        addi x8, x8, -1   
        jal x0, mul_loop  

finMul:
        sw x3, 100(x0)     
        jal x0, ini 

division: 
        addi x11, x0, 0    # division cociente en 0  

        beq  x4, x0, guar  # Si el dividendo es 0, finalizar
        beq  x5, x0, guar  # Si el divisor es 0, finalizar

bucle_division:  
        slt  x6, x4, x5    # x6 = 1 si A < B, 0 en otro caso  
        beq  x6, x0, rest_division # Si A >= B, continuar  
        jal  x0, guar # Si A < B, terminar  

rest_division:
        sub  x4, x4, x5    # rest_divisionr divisor del dividendo  
        addi x11, x11, 1   # Incrementar cociente  
        jal  x0, bucle_division     # Repetir  

guar:
        sw   x11, 100(x0)  # Guardar cociente en memoria  
        jal  x0, ini       # Volver al divisioncio para una nueva 
        


despIzq:	
		addi x4,x0,1
        addi x10,x0,-0x800   
		addi x11,x0, 0x7F0
		addi x3,x0,1 
bucle_Izq:		
        sub x7,x10,x3
        add x7,x7,x7
		sw x7,100(x0)
#retardo
		addi x5,x0,550
ret_Izq2:	addi x6,x0,1000

ret_Izq1:   sub x6,x6,x4 #x6=x6-1
		beq x6,x0,salto_Izq1
     	jal x0,ret_Izq1   
salto_Izq1:
		sub x5,x5,x4
        beq x5,x0,salto_Izq2
        jal x0,ret_Izq2
salto_Izq2:   
		add x3,x3,x3
		beq x3,x0,despIzq
		jal x0,bucle_Izq


decremento:
    addi x4, x0, 1         # Inicializa x4 en 1
    addi x3, x0, -2048      # Inicializa x3 en 1

bucledecrem:
    addi x10, x0, -0x800  # Inicializa x10 en 2047
    addi x11, x0,  0   # Inicializa x11 en -2048 (0x800 en complemento a dos)
    
    sub x7, x10, x3        # Calcula x7 = x10 - x3
    sw x7, 100(x0)         # Almacena el valor de x7 en memoria en la dirección 100(x0)
	
    # Retardo
    addi x5, x0, 850      # Inicializa x5 en 2047 (retardo)

ret2decrem:
    addi x6, x0, 850     # Inicializa x6 en 2047

ret1decrem:
    sub x6, x6, x4         # Decrementa x6 (x6 = x6 - 1)
    beq x6, x0, salto1decrem     # Si x6 == 0, salta a salto1
    jal x0, ret1decrem           # Si no, vuelve a ret1 (decrementando x6)

salto1decrem:
    sub x5, x5, x4         # Decrementa x5 (x5 = x5 - 1)
    beq x5, x0, salto2decrem     # Si x5 == 0, salta a salto2
    jal x0, ret2decrem           # Si no, vuelve a ret2 (decrementando x5)

salto2decrem:
    addi x3, x3, 1         # Incrementa x3 (x3 = x3 + 1)

    # Comparar x3 con un valor específico (por ejemplo, 64)
    beq x3, x10, decremento     # Si x3 == 2047, salta a decrem (reinicia el ciclo)

    # Si no, seguimos en el ciclo
    jal x0, bucledecrem          # Salta de nuevo al inicio del bucle


incremento:
    addi x4, x0, 1          # Inicializa x4 en 1 (para decrementos)
    addi x3, x0, 0      # Inicializa x3 en 2047 (valor inicial alto)

bucleincrem:
    # Escribir 0 en memoria antes de decrementar x3
    addi x7, x0, 0          # Establecer el valor 0 en x7
    sw x7, 100(x0)          # Escribir 0 en la dirección de memoria 100(x0)

    addi x10, x0, 0     # Inicializa x10 en -2048 (límite inferior)
    addi x11, x0, 0     # Inicializa x11 en 2047 (límite superior)
    
    sub x7, x3, x10         # Calcula x7 = x3 - x10
    sw x7, 100(x0)          # Almacena el valor de x7 en memoria en la dirección 100(x0)

    # Retardo
    addi x5, x0, 850        # Inicializa x5 en 850 (retardo)

ret2increm:
    addi x6, x0, 850        # Inicializa x6 en 850

ret1increm:
    sub x6, x6, x4          # Decrementa x6 (x6 = x6 - 1)
    beq x6, x0, salto1increm      # Si x6 == 0, salta a salto1
    jal x0, ret1increm            # Si no, vuelve a ret1 (decrementando x6)

salto1increm:
    sub x5, x5, x4          # Decrementa x5 (x5 = x5 - 1)
    beq x5, x0, salto2increm      # Si x5 == 0, salta a salto2
    jal x0, ret2increm            # Si no, vuelve a ret2 (decrementando x5)

salto2increm:
    addi x3, x3, 1         # Decrementa x3 (x3 = x3 - 1)

    # Comparar x3 con -2048 para reiniciar el ciclo
    beq x3, x10, incremento       # Si x3 == -2048, reinicia el ciclo

    # Si no, seguimos en el ciclo
    jal x0, bucleincrem           # Salta de nuevo al inicio del bucle



despDer:
    addi x3, x0, 2047    # Inicializa x3 con el bit más a la izquierda (2048)
    addi x4, x0, 1       # Constante 1 para decrementos

bucle:
    sw x3, 100(x0)       # Envía el patrón de LEDs a la dirección 100(x0)

    # Retardo (bucle anidado externo e interno)
    addi x5, x0, 850     # Inicializa contador externo de retardo
retardo_externo:
    addi x6, x0, 850     # Inicializa contador interno de retardo
retardo_interno:
    sub x6, x6, x4       # Decrementa x6 (retardo interno)
    beq x6, x0, fin_retardo_interno  # Si x6 llega a 0, termina retardo interno
    jal x0, retardo_interno          # Repite retardo interno
fin_retardo_interno:
    sub x5, x5, x4       # Decrementa x5 (retardo externo)
    beq x5, x0, fin_retardo_externo  # Si x5 llega a 0, termina retardo externo
    jal x0, retardo_externo          # Repite retardo externo
fin_retardo_externo:

    # Desplazamiento a la derecha: determinar el siguiente valor de x3
    addi x7, x0, 1
    beq x3, x7, reinicio         # Si x3 es 1, reinicia a 2048

    addi x7, x0, 2047
    beq x3, x7, set_1024         # Si x3 es 2048, siguiente será 1024

    addi x7, x0, 1024
    beq x3, x7, set_512          # Si x3 es 1024, siguiente será 512

    addi x7, x0, 512
    beq x3, x7, set_256          # Si x3 es 512, siguiente será 256

    addi x7, x0, 256
    beq x3, x7, set_128          # Si x3 es 256, siguiente será 128

    addi x7, x0, 128
    beq x3, x7, set_64           # Si x3 es 128, siguiente será 64

    addi x7, x0, 64
    beq x3, x7, set_32           # Si x3 es 64, siguiente será 32

    addi x7, x0, 32
    beq x3, x7, set_16           # Si x3 es 32, siguiente será 16

    addi x7, x0, 16
    beq x3, x7, set_8            # Si x3 es 16, siguiente será 8

    addi x7, x0, 8
    beq x3, x7, set_4            # Si x3 es 8, siguiente será 4

    addi x7, x0, 4
    beq x3, x7, set_2            # Si x3 es 4, siguiente será 2

    addi x7, x0, 2
    beq x3, x7, set_1            # Si x3 es 2, siguiente será 1

set_1024:
    addi x3, x0, 1024          # Establece x3 en 1024
    jal x0, bucle              # Vuelve al inicio del bucle

set_512:
    addi x3, x0, 512           # Establece x3 en 512
    jal x0, bucle

set_256:
    addi x3, x0, 256           # Establece x3 en 256
    jal x0, bucle

set_128:
    addi x3, x0, 128           # Establece x3 en 128
    jal x0, bucle

set_64:
    addi x3, x0, 64            # Establece x3 en 64
    jal x0, bucle

set_32:
    addi x3, x0, 32            # Establece x3 en 32
    jal x0, bucle

set_16:
    addi x3, x0, 16            # Establece x3 en 16
    jal x0, bucle

set_8:
    addi x3, x0, 8             # Establece x3 en 8
    jal x0, bucle

set_4:
    addi x3, x0, 4             # Establece x3 en 4
    jal x0, bucle

set_2:
    addi x3, x0, 2             # Establece x3 en 2
    jal x0, bucle

set_1:
    addi x3, x0, 1             # Establece x3 en 1
    jal x0, bucle

reinicio:
    addi x3, x0, 2047         # Reinicia el patrón: vuelve a 2048
    jal x0, bucle


fibonacci:
 # Secuencia Fibonacci con retardo de 2000 ms entre cada visualización
    addi x3, x0, 0         # x3 = F(0) = 0 (penúltimo término)
    addi x4, x0, 1         # x4 = F(1) = 1 (último término)
    addi x7, x0, 1         # x7 = constante 1

    sw x3, 100(x0)         # Muestra F(0) en el display

    # Retardo de 2000 ms para visualizar F(0)
    addi x10, x0, 500      # x10: contador exterior (200 iteraciones, cada una ≈10 ms)
outer_delay0:
    addi x8, x0, 256       # x8: contador medio (256 iteraciones)
middle_delay0:
    addi x9, x0, 650       # x9: contador interior (650 iteraciones)
inner_delay0:
    sub x9, x9, x7         # Decrementa contador interior
    beq x9, x0, inner_delay0_end  # Si x9 == 0, termina bucle interior
    jal x0, inner_delay0   # Repite bucle interior
inner_delay0_end:
    sub x8, x8, x7         # Decrementa contador medio
    beq x8, x0, middle_delay0_end  # Si x8 == 0, termina bucle medio
    jal x0, middle_delay0  # Repite bucle medio
middle_delay0_end:
    sub x10, x10, x7       # Decrementa contador exterior
    beq x10, x0, delay0_end  # Si x10 == 0, termina retardo
    jal x0, outer_delay0   # Repite bucle exterior
delay0_end:

    sw x4, 100(x0)         # Muestra F(1) en el display

    # Retardo de 2000 ms para visualizar F(1)
    addi x10, x0, 500     # x10: contador exterior
outer_delay1:
    addi x8, x0, 256       # x8: contador medio
middle_delay1:
    addi x9, x0, 650       # x9: contador interior
inner_delay1:
    sub x9, x9, x7         # Decrementa contador interior
    beq x9, x0, inner_delay1_end
    jal x0, inner_delay1
inner_delay1_end:
    sub x8, x8, x7         # Decrementa contador medio
    beq x8, x0, middle_delay1_end
    jal x0, middle_delay1
middle_delay1_end:
    sub x10, x10, x7       # Decrementa contador exterior
    beq x10, x0, delay1_end
    jal x0, outer_delay1
delay1_end:

loop:
    add x5, x3, x4         # x5 = F(n) = F(n-2) + F(n-1)
    sw x5, 100(x0)         # Muestra F(n) en el display

    # Retardo de 2000 ms para visualizar F(n)
    addi x10, x0, 500      # x10: contador exterior
outer_delay2:
    addi x8, x0, 256       # x8: contador medio
middle_delay2:
    addi x9, x0, 650       # x9: contador interior
inner_delay2:
    sub x9, x9, x7         # Decrementa contador interior
    beq x9, x0, inner_delay2_end
    jal x0, inner_delay2
inner_delay2_end:
    sub x8, x8, x7         # Decrementa contador medio
    beq x8, x0, middle_delay2_end
    jal x0, middle_delay2
middle_delay2_end:
    sub x10, x10, x7       # Decrementa contador exterior
    beq x10, x0, delay2_end
    jal x0, outer_delay2
delay2_end:
    add x3, x4, x0         # Actualiza: F(n-2) <= F(n-1)
    add x4, x5, x0         # Actualiza: F(n-1) <= F(n)
    jal x0, loop           # Repite el ciclo infinito
	
	
factorial:

        add x10, x4, x5  # x10 = A + B, el número para calcular el factorial */
        addi x11,x0,1    # x11 = 1, para almacenar el resultado */

bucle_fact:  
        beq x10,x0,fin_fact      # Si x10 es 0, termina el cálculo */
        addi x7,x0,0        # Inicializa x7 como acumulador de la multiplicación */
        addi x5,x0,0        # Inicializa contador de sumas */
mult_fact:   
		beq x5,x10,sal_fact # Si el contador alcanza x10, termina la suma repetida */
        add x7,x7,x11       # x7 = x7 + x11 */
        addi x5,x5,1        # Incrementa el contador */
        jal x0,mult_fact        # Salta de nuevo a mult */
sal_fact:
        add x11,x7,x0       # Almacena el resultado en x11 */
        addi x10,x10,-1     # x10 = x10 - 1 */
        jal x0,bucle_fact       # Salta de nuevo al bucle */

fin_fact:    sw x11,100(x0)      # Guarda el resultado en la memoria */
        jal x0,ini          # Reinicia el programa */
